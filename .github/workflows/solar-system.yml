name: Solar System Workflow

on:
      workflow_dispatch:
      push:
        branches:
            - main
            - 'feature/*'

env:
    MONGO_URI: 'mongodb+srv://supercluster.d83jj.mongodb.net/superData'
    MONGO_USERNAME: ${{ vars.MONGO_USERNAME }}
    MONGO_PASSWORD: ${{ secrets.MONGO_PASSWORD }}

jobs:
    unit-testing:
        strategy:
          matrix:
            nodejs_version: [18, 19, 20]
            operating_system: [ubuntu-latest, macos-latest]
            exclude:
            - nodejs_version: 18
              operating_system: macos-latest
        name: Unit Testing
        runs-on: ${{ matrix.operating_system }}
        steps:
        - name: Checkout Repository
          uses: actions/checkout@v4

        - name: Setup NodeJS Version - 18
          uses: actions/setup-node@v3
          with:
            node-version: ${{ matrix.nodejs_version }}

        - name: Cache NPM Dependencies
          uses: actions/cache@v3	
          with:
            path: node_modules	# must match where npm really installs dependencies
            key: ${{ runner.os }}-node-modules-${{ hashFiles('package-lock.json') }}

        - name: Install Dependencies
          run: npm install

        - name: Unit Testing
          id: nodejs-testing
          run: npm test

        - name: Archive Test Result
          uses: actions/upload-artifact@v4
          if: always()
          with:
            name: Mocha-Test-Result-${{ matrix.operating_system }}.${{ matrix.nodejs_version }}
            path: test-results.xml

    code-coverage:
        name: Code Coverage
        runs-on: ubuntu-latest
        steps:
        - name: Checkout Repository
          uses: actions/checkout@v4		# checkout the repo

        - name: Setup NodeJS Version - 18
          uses: actions/setup-node@v3	# needed since the app uses NodeJS
          with:
            node-version: 18		# installs version 18

        - name: Cache NPM Dependencies
          uses: actions/cache@v3	
          with:
            path: node_modules	# must match where npm really installs dependencies
            key: ${{ runner.os }}-node-modules-${{ hashFiles('package-lock.json') }}

        - name: Install Dependencies
          run: npm install			# installs dependencies from package.json

        - name: Check Code Coverage
          run: npm run coverage			# run code coverage
          continue-on-error: true

        - name: Archive Code Coverage Result
          uses: actions/upload-artifact@v4
          with:
            name: Code-Coverage-Result
            path: coverage
            retention-days: 5

    docker:
        permissions: write-all
        name: Containerization
        needs: [unit-testing, code-coverage]
        runs-on: ubuntu-latest
        steps:
        - name: Checkout Repo
          uses: actions/checkout@v4

        - name: Dockerhub Login
          uses: docker/login-action@v2.2.0
          with:
            username: ${{ vars.DOCKERHUB_USERNAME }}
            password: ${{ secrets.DOCKERHUB_PASSWORD }} 

        # above tags image with sha of the commit, keep in mind the image is
        # built with the tag but not pushed to registry.  It is is in the 
        # local docker engine though!
        - name: GHCR Login
          uses: docker/login-action@v2.2.0
          with:
            registry: ghcr.io
            username: ${{ github.repository_owner }}
            password: ${{ secrets.GITHUB_TOKEN }} 

        # github.repository_owner is already a premade variable in the github context
        # secrets.GITHUB_TOKEN is automatically created for each workflow job

        - name: Docker Build and Tag
          uses: docker/build-push-action@v6
          with:
            context: .
            push: false
            tags: ${{ vars.DOCKERHUB_USERNAME }}/solar-system:${{ github.sha }}


        # below runs the docker image that was built in the previous step
        - name: Docker Image Test
          run: |
            docker images
            docker run --name solar-system-app -d \
              -p 3000:3000 \
              -e MONGO_URI=$MONGO_URI \
              -e MONGO_USERNAME=$MONGO_USERNAME \
              -e MONGO_PASSWORD=$MONGO_PASSWORD \
              ${{ vars.DOCKERHUB_USERNAME }}/solar-system:${{ github.sha }}
            
            export IP=$(docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' solar-system-app)
            echo $IP

            echo Testing Image URL using wget
            wget -q -O - 127.0.0.1:3000/live | grep live

        - name: Docker Push to docker hub AND github container registry
          uses: docker/build-push-action@v6
          with:
            context: .
            push: true
            tags: |
                ${{ vars.DOCKERHUB_USERNAME }}/solar-system:${{ github.sha }}
                ghcr.io/${{ github.repository_owner }}/solar-system:${{ github.sha }}

    dev-deploy:
        needs: docker
        environment:
          name: development
          url: https://${{ steps.ingress1.outputs.APP_INGRESS_HOST }}
        runs-on: ubuntu-latest
        outputs:
          APP_INGRESS_URL: ${{ steps.ingress1.outputs.APP_INGRESS_HOST }} 
        steps:
        - name: Checkout Repo
          uses: actions/checkout@v4

        - name: Install kubectl CLI
          uses: azure/setup-kubectl@v3
          with:
            version: "v1.26.0"

        - name: Set Kubernetes context
          uses: azure/k8s-set-context@v4
          with:
            method: kubeconfig
            kubeconfig: ${{ secrets.KUBECONFIG }}

        - name: Fetch Kubernetes Cluster Details
          run: |
            kubectl version --short
            echo -------------------------------------------------
            kubectl get nodes
            
        - name: Get Ingress IP
          run: |
            echo "$INGRESS_IP=$(kubectl -n ingress-nginx services ingress-nginx-controller -o jsonpath="{.status.loadBalancer.ingress[0].ip}")" >> $GITHUB_ENV

        - name: Replace Token in Manifest files
          uses: cschleiden/replace-tokens@v1
          with:
            tokenPrefix: '_{_'
            tokenSuffix: '_}_'
            files: '["kubernetes/development/*.yaml"]'
          env:
            NAMESPACE: ${{ vars.NAMESPACE }} # vars. is used since it is in repo level
            INGRESS_IP: ${{ env.INGRESS_IP }} # env. is used since it is in env level
            IMAGE: ${{ vars.DOCKERHUB_USERNAME }}/solar-system:${{ github.sh }}

        - name: Check files
          run: |
            cat kubernetes/development/*.yaml

        - name: Deploy to Dev Kubernetes
          run: |
            kubectl apply -f kubernetes/development/*.yaml
            
        - name: Create MongoDB Secret
          run: |
            kubectl -n ${{ vars.NAMESPACE }} create secret generic mongo-db-creds \
            --from-literall=MONGO_URI=${{ env.MONGO_URI }} \ # defined in env
            --from-literall=MONGO_USERNAME=${{ vars.MONGO_USERNAME }} \ # defined in repo
            --from-literall=MONGO_PASSWORD=${{ secrets.MONGO_PASSWORD }} \
            --save-config \
            --dry-run=client \
            -o yaml | kubectl apply -f -
      
        - name: Deploy to dev env
          run: |
            kubectl apply -f kubernetes/development/*.yaml

        - id: ingress1
          name: Set App Ingress Host URL
          run: |
            echo "APP_INGRESS_HOST=$(kubectl -n ${{ vars.NAMESPACE }} get ingress \
            -o jsonpath="{.items[0].spec.tls[0].hosts[0]}")" >> "$GITHUB_OUTPUT"

      dev-integration-testing:
        name: Dev integration testing
        environment:
          name: development
          url: 
        runs-on: ubuntu-latest
        needs: dev-deploy
        steps:
        - name: Test URL Output using CURL and JQ
          env:
            URL: ${{ needs.dev-deploy.outputs.APP_INGRESS_URL }}
          run: |
            echo $URL
            echo "---------------------------------"
            curl https://$URL/live -s -k | jq -r .status | grep -i live

  